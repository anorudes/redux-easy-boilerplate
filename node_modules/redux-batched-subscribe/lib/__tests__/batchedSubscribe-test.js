'use strict';

var _ = require('../');

var _sinon = require('sinon');

function createStoreShape() {
  return {
    dispatch: _sinon.spy(),
    subscribe: _sinon.spy()
  };
}

describe('batchedSubscribe()', function () {
  it('it calls batch function on dispatch', function () {
    var batchSpy = _sinon.spy();
    var baseStore = createStoreShape();
    var createStore = function createStore() {
      return baseStore;
    };
    var store = _.batchedSubscribe(batchSpy)(createStore)();

    store.dispatch({ type: 'foo' });

    expect(batchSpy.callCount).to.equal(1);
  });

  it('batch callback executes listeners', function () {
    var subscribeCallbackSpy = _sinon.spy();
    var baseStore = createStoreShape();
    var createStore = function createStore() {
      return baseStore;
    };
    var store = _.batchedSubscribe(function (cb) {
      return cb();
    })(createStore)();

    store.subscribe(subscribeCallbackSpy);
    store.dispatch({ type: 'foo' });

    expect(baseStore.subscribe.callCount).to.equal(0);
    expect(subscribeCallbackSpy.callCount).to.equal(1);
  });

  it('it exposes base subscribe as subscribeImmediate', function () {
    var baseStore = createStoreShape();
    var createStore = function createStore() {
      return baseStore;
    };
    var store = _.batchedSubscribe(function (cb) {
      return cb();
    })(createStore)();

    store.subscribeImmediate();

    expect(baseStore.subscribe.callCount).to.equal(1);
  });

  it('unsubscribes batch callbacks', function () {
    var subscribeCallbackSpy = _sinon.spy();
    var baseStore = createStoreShape();
    var createStore = function createStore() {
      return baseStore;
    };
    var store = _.batchedSubscribe(function (cb) {
      return cb();
    })(createStore)();
    var unsubscribe = store.subscribe(subscribeCallbackSpy);

    unsubscribe();

    store.dispatch({ type: 'foo' });

    expect(subscribeCallbackSpy.callCount).to.equal(0);
  });

  it('should support removing a subscription within a subscription', function () {
    var baseStore = createStoreShape();
    var createStore = function createStore() {
      return baseStore;
    };
    var store = _.batchedSubscribe(function (cb) {
      return cb();
    })(createStore)();

    var listenerA = _sinon.spy();
    var listenerB = _sinon.spy();
    var listenerC = _sinon.spy();

    store.subscribe(listenerA);
    var unSubB = store.subscribe(function () {
      listenerB();
      unSubB();
    });
    store.subscribe(listenerC);

    store.dispatch({});
    store.dispatch({});

    expect(listenerA.callCount).to.equal(2);
    expect(listenerB.callCount).to.equal(1);
    expect(listenerC.callCount).to.equal(2);
  });

  it('should throw for invalid batch callback', function () {
    expect(function () {
      _.batchedSubscribe(null);
    }).to['throw'](Error);

    expect(function () {
      _.batchedSubscribe(undefined);
    }).to['throw'](Error);

    expect(function () {
      _.batchedSubscribe('foo');
    }).to['throw'](Error);
  });
});